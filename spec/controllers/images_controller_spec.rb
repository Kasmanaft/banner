require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ImagesController do

  # This should return the minimal set of attributes required to create a valid
  # Image. As you add validations to Image, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { 
      "max_show" => "13", 
      "link"=>"http://localhost"
     }
  end

  login_user

  describe "GET new" do
    it "assigns a new image as @image" do
      campaign = FactoryGirl.create :campaign
      get :new, {:campaign_id=>campaign.id}
      assigns(:image).should be_a_new(Image)
    end
  end

  describe "GET edit" do
    it "assigns the requested image as @image" do
      image = FactoryGirl.create :image
      get :edit, {:id => image.to_param, :campaign_id=>image.campaign.id}
      assigns(:image).should eq(image)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Image" do
        ImageUploader.any_instance.stub :download!
        image = FactoryGirl.create :image
        expect {
          post :create, {:image => valid_attributes, :campaign_id=>image.campaign.id}
        }.to change(Image, :count).by(1)
        ImageUploader.any_instance.unstub :download!
      end

      it "assigns a newly created image as @image" do
        ImageUploader.any_instance.stub :download!
        campaign = FactoryGirl.create :campaign
        post :create, {:image => valid_attributes, :campaign_id=>campaign.id}
        assigns(:image).should be_a(Image)
        assigns(:image).should be_persisted
        ImageUploader.any_instance.unstub :download!
      end

      it "redirects to the parent campaign" do
        ImageUploader.any_instance.stub :download!
        campaign = FactoryGirl.create :campaign
        post :create, {:image => valid_attributes, :campaign_id=>campaign.id}
        response.should redirect_to(campaign_path(campaign))
        ImageUploader.any_instance.unstub :download!
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved image as @image" do
        # Trigger the behavior that occurs when invalid params are submitted
        campaign = FactoryGirl.create :campaign
        Image.any_instance.stub(:save).and_return(false)
        post :create, {:image => { "file" => "invalid value" }, :campaign_id=>campaign.id}
        assigns(:image).should be_a_new(Image)
      end
    end
  end

  describe "PUT update" do
    context "with valid params" do
      it "updates the requested image" do
        image = FactoryGirl.create :image
        # Assuming there are no other images in the database, this
        # specifies that the Image created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Image.any_instance.should_receive(:update_attributes).with({ "link" => "http://local.me/" })
        put :update, {:id => image.to_param, :image => { "link" => "http://local.me/" }, :campaign_id=>image.campaign.id}
      end

      it "assigns the requested image as @image" do
        image = FactoryGirl.create :image
        put :update, {:id => image.to_param, :image => valid_attributes, :campaign_id=>image.campaign.id}
        assigns(:image).should eq(image)
      end

      it "redirects to the image" do
        image = FactoryGirl.create :image
        put :update, {:id => image.to_param, :image => valid_attributes, :campaign_id=>image.campaign.id}
        response.should redirect_to(campaign_path(image.campaign))
      end
    end

    context "with invalid params" do
      it "assigns the image as @image" do
        image = FactoryGirl.create :image
        # Trigger the behavior that occurs when invalid params are submitted
        Image.any_instance.stub(:save).and_return(false)
        put :update, {:id => image.to_param, :image => { "link" => "invalid value" }, :campaign_id=>image.campaign.id}
        assigns(:image).should eq(image)
      end

    end
  end

  describe "DELETE destroy" do
    it "destroys the requested image" do
      image = FactoryGirl.create :image
      expect {
        delete :destroy, {:id => image.to_param, :campaign_id=>image.campaign.id}
      }.to change(Image, :count).by(-1)
    end

    it "redirects to the campaign" do
      image = FactoryGirl.create :image
      delete :destroy, {:id => image.to_param, :campaign_id=>image.campaign.id}
      response.should redirect_to(campaign_path(image.campaign))
    end
  end

end
